#!/usr/sbin/env python3
'''
Input from stdin: assembly program.
Output to stdout: instructions memory content in binary, each line contains 16 (0 or 1) each is encoded as ASCII byte.
Usage: ./asm </path/to/input/assembly >/path/to/binary/output
'''
import re
import sys

# dictionary of opcodes for all instructions
OP_CODES_TABLE = {
    "not": "1111001",
    "inc": "1111010",
    "dec": "1111011",
    "out": "1111100",
    "in": "1111000",
    "swap": "0001",
    "add": "0010",
    "iadd": "1000",
    "sub": "0011",
    "and": "0100",
    "or": "0101",
    "shl": "0110",
    "shr": "0111",
    "push": "1001",
    "pop": "1010",
    "ldm": "1011",
    "ldd": "1100",
    "std": "1101",
    "jz": "0000001",
    "jmp": "0000010",
    "call": "0000011",
    "ret": "0000100",
    "rti": "0000101"
}

# instruction distribution
INST_2OP = ["swap", "add", "iadd", "sub", "and", "or", "shl", "shr"]

INST_1OP = ["not", "inc", "dec", "out", "in"]

INST_BR = ["jz", "jmp", "call", "ret", "rti"]

INST_MEM = ["push", "pop", "ldm", "ldd", "std"]

# dictionary of register indices
REGISTERS = {
    "R0": "000",
    "R1": "001",
    "R2": "010",
    "R3": "011",
    "R4": "100",
    "R5": "101",
    "R6": "110",
    "R7": "111"
}


def assemble():
    """
        Go through the input text, 
        assemble RAM words
        and save them to output text.
    """
    # initialize variables
    in_file = sys.stdin
    ram_entries = dict()
    ram_div = ''

    # assume it's org 0 if not specified
    ram_div = '0'
    ram_entries['0'] = []

    # loop over every line in the input program
    for line_number, line in enumerate(in_file):

        # remove comments
        com_idx = line.find("#")
        if (com_idx != -1):
            if (com_idx != 0):
                line = line[:com_idx-1]
            else:
                continue

        # split words by delimiters
        line_words = re.split(';|,| |\n', line)
        line_words = [x for x in line_words if x != '']
        if (len(line_words) == 0):
            continue

        # parse instruction
        inst = line_words[0].lower()

        # check for memory organization
        if (inst == ".org"):
            ram_div = line_words[1]
            ram_entries[ram_div] = []

        # handle NOP instruction
        elif (inst == "nop"):
            ram_entries[ram_div].append("0000000000000000")

        # handle END instruction
        elif (inst == "end"):
            ram_entries[ram_div].append("0111000000000000")

        # handle 1-operand instruction
        elif (inst in INST_1OP):
            new_entry = OP_CODES_TABLE[inst]
            new_entry = "0" + new_entry + \
                REGISTERS[line_words[1].upper()] + "00000"
            ram_entries[ram_div].append(new_entry)

        # handle 2-operand instruction
        elif (inst in INST_2OP):
            new_entry = OP_CODES_TABLE[inst]
            if (inst == "swap"):
                new_entry = "0" + new_entry + REGISTERS[line_words[1].upper()] + \
                            REGISTERS[line_words[2].upper()] + "00000"
                ram_entries[ram_div].append(new_entry)
            elif (inst in ["add", "sub", "and", "or"]):
                new_entry = "0" + new_entry + REGISTERS[line_words[1].upper()] + \
                            REGISTERS[line_words[2].upper()] + \
                    REGISTERS[line_words[3].upper()] + "00"
                ram_entries[ram_div].append(new_entry)
            elif (inst in ["shl", "shr"]):
                im_val = bin(int(line_words[2], 16))[2:]
                im_val = '0'*(16-len(im_val)) + im_val
                new_entry = "1" + new_entry + \
                    REGISTERS[line_words[1].upper()] + \
                    im_val[:8]
                ram_entries[ram_div].append(new_entry)
                ram_entries[ram_div].append(
                    im_val[8:]+"00000000")
            else:
                im_val = bin(int(line_words[3], 16))[2:]
                im_val = '0'*(16-len(im_val)) + im_val
                new_entry = "1" + new_entry + REGISTERS[line_words[1].upper()] + \
                            REGISTERS[line_words[2].upper()] + \
                    im_val[:5]
                ram_entries[ram_div].append(new_entry)
                ram_entries[ram_div].append(
                    im_val[5:]+"00000")

        # handle memory instruction
        elif (inst in INST_MEM):
            new_entry = OP_CODES_TABLE[inst]
            if (inst in ["push", "pop"]):
                new_entry = "0" + new_entry + \
                    REGISTERS[line_words[1].upper()] + "00000000"
                ram_entries[ram_div].append(new_entry)
            elif (inst in ["ldd", "std"]):
                eff_adr = bin(int(line_words[2], 16))[2:]
                eff_adr = '0'*(20-len(eff_adr)) + eff_adr
                new_entry = "1" + new_entry + \
                    REGISTERS[line_words[1].upper()] + \
                    eff_adr[:8]
                ram_entries[ram_div].append(new_entry)
                ram_entries[ram_div].append(
                    eff_adr[8:]+"0000")
            else:
                im_val = bin(int(line_words[2], 16))[2:]
                im_val = '0'*(16-len(im_val)) + im_val
                new_entry = "1" + new_entry + \
                    REGISTERS[line_words[1].upper()] + \
                    im_val[:8]
                ram_entries[ram_div].append(new_entry)
                ram_entries[ram_div].append(
                    im_val[8:]+"00000000")

        # handle branch instruction
        elif (inst in INST_BR):
            new_entry = OP_CODES_TABLE[inst]
            if (inst in ["jz", "jmp", "call"]):
                if (inst == "jz"):  # add NOP before each JZ for hazard avoidance
                    ram_entries[ram_div].append("0000000000000000")
                new_entry = "0" + new_entry + \
                    REGISTERS[line_words[1].upper()] + "00000"
                ram_entries[ram_div].append(new_entry)
            else:
                new_entry = "0" + new_entry + "00000000"
                ram_entries[ram_div].append(new_entry)
                for i in range(3):  # add three NOPs after RET and RTI for hazard avoidance
                    ram_entries[ram_div].append("0000000000000000")

        # handle pc addresses
        else:
            try:
                new_entry = bin(int(inst, 16))[2:]
                if (len(new_entry) > 16):
                    pad_len = 32-len(new_entry)
                    split_idx = len(new_entry)-16
                    ram_entries[ram_div].append(
                        "0"*pad_len+new_entry[:split_idx])
                    ram_entries[ram_div].append(new_entry[split_idx:])
                else:
                    pad_len = 16-len(new_entry)
                    ram_entries[ram_div].append("0"*16)
                    ram_entries[ram_div].append("0"*pad_len+new_entry[:])
            except:
                print("invalid instruction", inst, 'in line', line_number+1, file=sys.stderr)
                exit(1)

    # generate full ram layout from processed instructions
    ram_layout = gen_layout(ram_entries)
    write_bin(ram_layout, sys.stdout)  # write output hex files


def gen_layout(ram_entries):
    """
        Write RAM layout to output file as HEX.
        Parameters:
        ram_entries (dict): dictionary of processed instructions.
    """
    ram_layout = [hex(int('0', 2))] * (2**8)  # initialize layout with zeros
    # loop over all RAM blocks
    for block in ram_entries.keys():
        idx = int(block, 16)
        # insert all block content in RAM layout
        for i in range(idx, idx+len(ram_entries[block])):
            ram_layout[i] = hex(int(ram_entries[block][i-idx], 2))
    return ram_layout


def write_bin(ram_layout, output_txt):
    """
        Write RAM layout to output file as HEX.
        Parameters:
        ram_layout (list): list of instructions in RAM layout.
        output_txt (string): name of outut text.
    """
    out_file = sys.stdout
    for entry in ram_layout:
        out_file.write('{:016b}'.format(int(entry, 16)))
        out_file.write("\n")
    out_file.close()


assemble()
